{"version":3,"sources":["components/Header.js","components/Wrapper.js","utils/API.js","components/EmployeeTable.js","components/SearchBar.js","components/SearchResultContainer.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","Wrapper","props","children","axios","get","EmployeeTable","onClick","sortByFirstName","sortByLastName","employees","map","employee","key","login","uuid","alt","name","first","last","src","picture","medium","phone","email","format","dob","date","SearchBar","onChange","handleInputChange","value","type","placeholder","id","SearchResultContainer","state","selectedEmployees","sortOrder","event","target","filter","toLowerCase","includes","setState","console","log","selected","sorted","sort","a","b","API","then","res","data","results","catch","err","this","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.4dcc7f49.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Header() {\n    return (\n        <nav className=\"navbar navbar-dark bg-dark\">\n            <span className=\"navbar-brand mb-0 h1\">Employee Directory</span>\n        </nav>\n    )\n}\n\nexport default Header;","import React from \"react\";\n\nfunction Wrapper(props) {\n    return (\n        <div className=\"container\">{props.children}</div>\n    )\n};\n\nexport default Wrapper;\n","import axios from \"axios\";\n\nexport default {\n    getUsers: function () {\n        return axios.get('https://randomuser.me/api/?results=100&nat=us');\n        \n    }\n};\n","import React from \"react\";\nimport Moment from \"react-moment\";\n\nfunction EmployeeTable(props) {\n    return (\n        <table>\n            <thead>\n                <tr>\n                    <th>Photo</th>\n                    <th className=\"thName\" onClick={props.sortByFirstName}><i className=\"material-icons\">swap_vert</i>First Name</th>\n                    <th className=\"thName\" onClick={props.sortByLastName}><i className=\"material-icons\">swap_vert</i>Last Name</th>\n                    <th>Phone</th>\n                    <th>Email</th>\n                    <th>DOB</th>\n                </tr>\n            </thead>\n            <tbody>\n                {props.employees.map(employee => (\n                    <tr className=\"tableRow\" key={employee.login.uuid}>\n                        <td>\n                            <img alt={employee.name.first + \" \" + employee.name.last} className=\"employeePic\" src={employee.picture.medium} />\n                        </td>\n                        <td>{employee.name.first}</td>\n                        <td>{employee.name.last}</td>\n                        <td>{employee.phone}</td>\n                        <td>{employee.email}</td>\n                        <td><Moment format=\"MM/DD/YYYY\">{employee.dob.date}</Moment></td>\n                    </tr>\n                ))}\n            </tbody>\n        </table>\n    )\n}\n\nexport default EmployeeTable;\n","import React from \"react\";\n\nfunction SearchBar(props) {\n    return (\n        <>\n            <form>\n                <input\n                    onChange={props.handleInputChange}\n                    value={props.value}\n                    name=\"search\"\n                    type=\"text\"\n                    className=\"searchBox form-control\"\n                    placeholder=\"Search by last name\"\n                    id=\"search\"        \n\n                />\n            </form>\n        </>\n    )\n}\n\nexport default SearchBar;","import React, { Component } from \"react\";\nimport API from \"../utils/API\";\nimport EmployeeTable from \"./EmployeeTable\";\nimport SearchBar from \"./SearchBar\";\n\nclass SearchResultContainer extends Component {\n    state = {\n        employees: [],\n        selectedEmployees: [],\n        sortOrder: \"\"\n    };\n\n    componentDidMount() {\n        API.getUsers()\n            .then(res => this.setState({\n                employees: res.data.results,\n                selectedEmployees: res.data.results\n            }))\n            .catch(err => console.log(err));\n    };\n\n    handleInputChange = event => {\n        let value = event.target.value;\n        const employees = this.state.employees;\n\n        let selectedEmployees = employees.filter(employee => employee.name.last.toLowerCase().includes(value.toLowerCase()));\n\n        this.setState({\n            ...this.state,\n            selectedEmployees\n        }, console.log(\"state\", this.state));\n    };\n\n    sortByLastName = () => {\n        const selected = this.state.selectedEmployees;\n\n        if (this.state.sortOrder === \"asc\") {\n            const sorted = selected.sort((a, b) =>\n\n                (a.name.last.toLowerCase() > b.name.last.toLowerCase()) ? 1 : -1)\n\n            this.setState({\n                selectedEmployees: sorted,\n                sortOrder: \"desc\"\n            })\n        }\n\n        else {\n            const sorted = selected.sort((a, b) => (a.name.last.toLowerCase() < b.name.last.toLowerCase()) ? 1 : -1)\n\n            this.setState({\n                selectedEmployees: sorted,\n                sortOrder: \"asc\"\n            })\n        }\n    };\n\n    sortByFirstName = () => {\n        const selected = this.state.selectedEmployees;\n\n        if (this.state.sortOrder === \"asc\") {\n            const sorted = selected.sort((a, b) =>\n\n                (a.name.first.toLowerCase() > b.name.first.toLowerCase()) ? 1 : -1)\n\n            this.setState({\n                selectedEmployees: sorted,\n                sortOrder: \"desc\"\n            })\n        }\n\n        else {\n            const sorted = selected.sort((a, b) => (a.name.first.toLowerCase() < b.name.first.toLowerCase()) ? 1 : -1)\n\n            this.setState({\n                selectedEmployees: sorted,\n                sortOrder: \"asc\"\n            })\n        }\n\n    };\n\n    render() {\n        return (\n            <>\n                <SearchBar\n                    handleInputChange={this.handleInputChange}\n                />\n                <EmployeeTable\n                    employees={this.state.selectedEmployees}\n                    sortByLastName={this.sortByLastName}\n                    sortByFirstName={this.sortByFirstName}\n                />\n            </>\n        );\n    }\n}\n\nexport default SearchResultContainer;\n","import React from 'react';\n// import logo from './logo.svg';\nimport './App.css';\n\nimport Header from \"./components/Header\";\nimport Wrapper from \"./components/Wrapper\";\nimport SearchResultContainer from \"./components/SearchResultContainer\";\n\n// import SearchBar from \"./components/SearchBar\";\n\nfunction App() {\n  return (\n    <>\n      <Header />\n      <Wrapper>\n        <SearchResultContainer />\n      </Wrapper>\n    </>\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}